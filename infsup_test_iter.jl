
using ApproxOperator, LinearAlgebra, XLSX, SparseArrays
using ApproxOperator.Elasticity: ‚à´‚à´Œµ·µà·µ¢‚±ºœÉ·µà·µ¢‚±ºdxdy, ‚à´‚à´qpdxdy, ‚à´‚à´p‚àáudxdy, ‚à´v·µ¢g·µ¢ds, ‚à´‚à´v·µ¢b·µ¢dxdy, ‚à´v·µ¢t·µ¢ds, L‚ÇÇ, L‚ÇÇùëù

include("import_patchtest.jl")

ndiv = 16

indices = 2:64

n_eig_nonzeros = zeros(Int,length(indices))
n_eig_real = zeros(Int,length(indices))
min_eig_nonzeros = zeros(length(indices))
min_eig_real = zeros(length(indices))

for (i,n) in enumerate(indices)

# elements, nodes, nodes_p = import_infsup_linear_mix("./msh/patchtest_"*string(ndiv)*".msh","./msh/patchtest_"*string(n)*".msh",n,n)
# elements, nodes, nodes_p = import_infsup_linear_mix("./msh/patchtest_quad_"*string(ndiv)*".msh","./msh/patchtest_"*string(n)*".msh",n,n)
# elements, nodes, nodes_p = import_infsup_quadratic_mix("./msh/patchtest_tri6_"*string(ndiv)*".msh","./msh/patchtest_"*string(n)*".msh",n,n)
elements, nodes, nodes_p = import_infsup_quadratic_mix("./msh/patchtest_quad8_"*string(ndiv)*".msh","./msh/patchtest_"*string(n)*".msh",n,n)
# nx = 2;ny = n;
# elements, nodes, nodes_p = import_infsup_linear_mix("./msh/patchtest_"*string(ndiv)*".msh","./msh/patchtest_"*string(nx)*"_"*string(ny)*".msh",nx,ny)

n‚Çë = length(elements["Œ©·µò"])
n·µ§ = length(nodes)
n‚Çö = length(nodes_p)

E = 1.0
ŒΩ = 0.3
# ŒΩ = 0.5-1e3

# n = 1
# u(x,y) = (1+2*x+3*y)^n
# v(x,y) = (4+5*x+6*y)^n
# ‚àÇu‚àÇx(x,y) = 2*n*(1+2*x+3*y)^abs(n-1)
# ‚àÇu‚àÇy(x,y) = 3*n*(1+2*x+3*y)^abs(n-1)
# ‚àÇv‚àÇx(x,y) = 5*n*(4+5*x+6*y)^abs(n-1)
# ‚àÇv‚àÇy(x,y) = 6*n*(4+5*x+6*y)^abs(n-1)
# ‚àÇ¬≤u‚àÇx¬≤(x,y)  = 4*n*(n-1)*(1+2*x+3*y)^abs(n-2)
# ‚àÇ¬≤u‚àÇx‚àÇy(x,y) = 6*n*(n-1)*(1+2*x+3*y)^abs(n-2)
# ‚àÇ¬≤u‚àÇy¬≤(x,y)  = 9*n*(n-1)*(1+2*x+3*y)^abs(n-2)
# ‚àÇ¬≤v‚àÇx¬≤(x,y)  = 25*n*(n-1)*(4+5*x+6*y)^abs(n-2)
# ‚àÇ¬≤v‚àÇx‚àÇy(x,y) = 30*n*(n-1)*(4+5*x+6*y)^abs(n-2)
# ‚àÇ¬≤v‚àÇy¬≤(x,y)  = 36*n*(n-1)*(4+5*x+6*y)^abs(n-2)

# Œµ‚ÇÅ‚ÇÅ(x,y) = ‚àÇu‚àÇx(x,y)
# Œµ‚ÇÇ‚ÇÇ(x,y) = ‚àÇv‚àÇy(x,y)
# Œµ‚ÇÅ‚ÇÇ(x,y) = 0.5*(‚àÇu‚àÇy(x,y) + ‚àÇv‚àÇx(x,y))
# œÉ‚ÇÅ‚ÇÅ(x,y) = E/(1+ŒΩ)/(1-2*ŒΩ)*((1-ŒΩ)*Œµ‚ÇÅ‚ÇÅ(x,y) + ŒΩ*Œµ‚ÇÇ‚ÇÇ(x,y))
# œÉ‚ÇÇ‚ÇÇ(x,y) = E/(1+ŒΩ)/(1-2*ŒΩ)*(ŒΩ*Œµ‚ÇÅ‚ÇÅ(x,y) + (1-ŒΩ)*Œµ‚ÇÇ‚ÇÇ(x,y))
# œÉ‚ÇÉ‚ÇÉ(x,y) = E/(1+ŒΩ)/(1-2*ŒΩ)*(ŒΩ*Œµ‚ÇÅ‚ÇÅ(x,y) + ŒΩ*Œµ‚ÇÇ‚ÇÇ(x,y))
# œÉ‚ÇÅ‚ÇÇ(x,y) = E/(1+ŒΩ)*Œµ‚ÇÅ‚ÇÇ(x,y)
# ‚àÇŒµ‚ÇÅ‚ÇÅ‚àÇx(x,y) = ‚àÇ¬≤u‚àÇx¬≤(x,y)
# ‚àÇŒµ‚ÇÅ‚ÇÅ‚àÇy(x,y) = ‚àÇ¬≤u‚àÇx‚àÇy(x,y)
# ‚àÇŒµ‚ÇÇ‚ÇÇ‚àÇx(x,y) = ‚àÇ¬≤v‚àÇx‚àÇy(x,y)
# ‚àÇŒµ‚ÇÇ‚ÇÇ‚àÇy(x,y) = ‚àÇ¬≤v‚àÇy¬≤(x,y)
# ‚àÇŒµ‚ÇÅ‚ÇÇ‚àÇx(x,y) = 0.5*(‚àÇ¬≤u‚àÇx‚àÇy(x,y) + ‚àÇ¬≤v‚àÇx¬≤(x,y))
# ‚àÇŒµ‚ÇÅ‚ÇÇ‚àÇy(x,y) = 0.5*(‚àÇ¬≤u‚àÇy¬≤(x,y) + ‚àÇ¬≤v‚àÇx‚àÇy(x,y))

# ‚àÇœÉ‚ÇÅ‚ÇÅ‚àÇx(x,y) = E/(1+ŒΩ)/(1-2*ŒΩ)*((1-ŒΩ)*‚àÇŒµ‚ÇÅ‚ÇÅ‚àÇx(x,y) + ŒΩ*‚àÇŒµ‚ÇÇ‚ÇÇ‚àÇx(x,y))
# ‚àÇœÉ‚ÇÅ‚ÇÅ‚àÇy(x,y) = E/(1+ŒΩ)/(1-2*ŒΩ)*((1-ŒΩ)*‚àÇŒµ‚ÇÅ‚ÇÅ‚àÇy(x,y) + ŒΩ*‚àÇŒµ‚ÇÇ‚ÇÇ‚àÇy(x,y))
# ‚àÇœÉ‚ÇÇ‚ÇÇ‚àÇx(x,y) = E/(1+ŒΩ)/(1-2*ŒΩ)*(ŒΩ*‚àÇŒµ‚ÇÅ‚ÇÅ‚àÇx(x,y) + (1-ŒΩ)*‚àÇŒµ‚ÇÇ‚ÇÇ‚àÇx(x,y))
# ‚àÇœÉ‚ÇÇ‚ÇÇ‚àÇy(x,y) = E/(1+ŒΩ)/(1-2*ŒΩ)*(ŒΩ*‚àÇŒµ‚ÇÅ‚ÇÅ‚àÇy(x,y) + (1-ŒΩ)*‚àÇŒµ‚ÇÇ‚ÇÇ‚àÇy(x,y))
# ‚àÇœÉ‚ÇÅ‚ÇÇ‚àÇx(x,y) = E/(1+ŒΩ)*‚àÇŒµ‚ÇÅ‚ÇÇ‚àÇx(x,y)
# ‚àÇœÉ‚ÇÅ‚ÇÇ‚àÇy(x,y) = E/(1+ŒΩ)*‚àÇŒµ‚ÇÅ‚ÇÇ‚àÇy(x,y)
# b‚ÇÅ(x,y) = -‚àÇœÉ‚ÇÅ‚ÇÅ‚àÇx(x,y) - ‚àÇœÉ‚ÇÅ‚ÇÇ‚àÇy(x,y)
# b‚ÇÇ(x,y) = -‚àÇœÉ‚ÇÅ‚ÇÇ‚àÇx(x,y) - ‚àÇœÉ‚ÇÇ‚ÇÇ‚àÇy(x,y)
# p(x,y) = (œÉ‚ÇÅ‚ÇÅ(x,y)+œÉ‚ÇÇ‚ÇÇ(x,y)+œÉ‚ÇÉ‚ÇÉ(x,y))/3

prescribe!(elements["Œ©·µò"],:E=>(x,y,z)->E, index=:ùëî)
prescribe!(elements["Œ©·µò"],:ŒΩ=>(x,y,z)->ŒΩ, index=:ùëî)
prescribe!(elements["Œ©·µñ"],:E=>(x,y,z)->E, index=:ùëî)
prescribe!(elements["Œ©·µñ"],:ŒΩ=>(x,y,z)->ŒΩ, index=:ùëî)
prescribe!(elements["Œ©·µç·µò"],:E=>(x,y,z)->E, index=:ùëî)
prescribe!(elements["Œ©·µç·µò"],:ŒΩ=>(x,y,z)->ŒΩ, index=:ùëî)
# prescribe!(elements["Œ©·µò"],:b‚ÇÅ=>(x,y,z)->b‚ÇÅ(x,y))
# prescribe!(elements["Œ©·µò"],:b‚ÇÇ=>(x,y,z)->b‚ÇÇ(x,y))
prescribe!(elements["Œì‚Å¥·µò"],:Œ±=>(x,y,z)->1e10)
# prescribe!(elements["Œì¬π·µò"],:t‚ÇÅ=>(x,y,z,n‚ÇÅ,n‚ÇÇ)->œÉ‚ÇÅ‚ÇÅ(x,y)*n‚ÇÅ+œÉ‚ÇÅ‚ÇÇ(x,y)*n‚ÇÇ)
# prescribe!(elements["Œì¬π·µò"],:t‚ÇÇ=>(x,y,z,n‚ÇÅ,n‚ÇÇ)->œÉ‚ÇÅ‚ÇÇ(x,y)*n‚ÇÅ+œÉ‚ÇÇ‚ÇÇ(x,y)*n‚ÇÇ)
# prescribe!(elements["Œì¬≤·µò"],:t‚ÇÅ=>(x,y,z,n‚ÇÅ,n‚ÇÇ)->œÉ‚ÇÅ‚ÇÅ(x,y)*n‚ÇÅ+œÉ‚ÇÅ‚ÇÇ(x,y)*n‚ÇÇ)
# prescribe!(elements["Œì¬≤·µò"],:t‚ÇÇ=>(x,y,z,n‚ÇÅ,n‚ÇÇ)->œÉ‚ÇÅ‚ÇÇ(x,y)*n‚ÇÅ+œÉ‚ÇÇ‚ÇÇ(x,y)*n‚ÇÇ)
# prescribe!(elements["Œì¬≥·µò"],:t‚ÇÅ=>(x,y,z,n‚ÇÅ,n‚ÇÇ)->œÉ‚ÇÅ‚ÇÅ(x,y)*n‚ÇÅ+œÉ‚ÇÅ‚ÇÇ(x,y)*n‚ÇÇ)
# prescribe!(elements["Œì¬≥·µò"],:t‚ÇÇ=>(x,y,z,n‚ÇÅ,n‚ÇÇ)->œÉ‚ÇÅ‚ÇÇ(x,y)*n‚ÇÅ+œÉ‚ÇÇ‚ÇÇ(x,y)*n‚ÇÇ)
prescribe!(elements["Œì‚Å¥·µò"],:g‚ÇÅ=>(x,y,z)->0.0)
prescribe!(elements["Œì‚Å¥·µò"],:g‚ÇÇ=>(x,y,z)->0.0)
prescribe!(elements["Œì‚Å¥·µò"],:n‚ÇÅ‚ÇÅ=>(x,y,z)->1.0)
prescribe!(elements["Œì‚Å¥·µò"],:n‚ÇÇ‚ÇÇ=>(x,y,z)->1.0)
prescribe!(elements["Œì‚Å¥·µò"],:n‚ÇÅ‚ÇÇ=>(x,y,z)->0.0)
# prescribe!(elements["Œ©·µç·µò"],:u=>(x,y,z)->u(x,y))
# prescribe!(elements["Œ©·µç·µò"],:v=>(x,y,z)->v(x,y))
# prescribe!(elements["Œ©·µç·µñ"],:p=>(x,y,z)->p(x,y))
# elements["Œì·µó"] = elements["Œì¬π·µò"]‚à™elements["Œì¬≤·µò"]‚à™elements["Œì¬≥·µò"]

ùëé·µò = ‚à´‚à´Œµ·µà·µ¢‚±ºœÉ·µà·µ¢‚±ºdxdy=>elements["Œ©·µò"]
ùëé·µñ = ‚à´‚à´qpdxdy=>elements["Œ©·µñ"]
ùëè·µñ = ‚à´‚à´p‚àáudxdy=>(elements["Œ©·µñ"],elements["Œ©·µò"])
ùëé·µò·µÖ = ‚à´v·µ¢g·µ¢ds=>elements["Œì‚Å¥·µò"]
# ùëì = [
#     ‚à´‚à´v·µ¢b·µ¢dxdy=>elements["Œ©·µò"],
#     ‚à´v·µ¢t·µ¢ds=>elements["Œì·µó"]
# ]

k·µò·µò = zeros(2*n·µ§,2*n·µ§)
k·µñ·µñ = zeros(n‚Çö,n‚Çö)
k·µñ·µò = zeros(n‚Çö,2*n·µ§)
f·µñ = zeros(n‚Çö)
f·µò = zeros(2*n·µ§)

ùëé·µò(k·µò·µò)
ùëé·µñ(k·µñ·µñ)
ùëè·µñ(k·µñ·µò)
ùëé·µò·µÖ(k·µò·µò,f·µò)

# d = [-k·µò·µò k·µñ·µò';k·µñ·µò k·µñ·µñ]\[-f·µò;f·µñ]

# ùë¢‚ÇÅ = d[1:2:2*n·µ§]
# ùë¢‚ÇÇ = d[2:2:2*n·µ§]
# ùëù = d[2*n·µ§+1:2*n·µ§+n‚Çö]
# push!(nodes,:d‚ÇÅ=>ùë¢‚ÇÅ)
# push!(nodes,:d‚ÇÇ=>ùë¢‚ÇÇ)
# push!(nodes_p,:p=>ùëù)

# L‚ÇÇu = L‚ÇÇ(elements["Œ©·µç·µò"])
# L‚ÇÇp = L‚ÇÇùëù(elements["Œ©·µç·µñ"])

# println(L‚ÇÇu)
# println(L‚ÇÇp)

# k·µà = k·µò·µò
# k·µõ = k·µñ·µò\k·µñ·µñ*k·µñ·µò
# val = eigvals(k·µõ,k·µà)
val = eigvals(k·µñ·µò'*(k·µñ·µñ\k·µñ·µò),k·µò·µò)

# println(2*n·µ§-n‚Çö+1)
# println("Unsorted Eigenvalue")
# println.(val[2*n·µ§-n‚Çö.+(-2:4)]);

val_sign = zeros(2*n·µ§)
for (ii,v) in enumerate(val)
    if v isa Real
        val_sign[ii] = sign(v)
    else
        val_sign[ii] = sign(v.re) < -1e-8 ? -1.0 : 1.0
    end
end
val_real = val_sign .* abs.(val)
val_abs = abs.(val)
# println("Sorted Eigenvalue")
val_sort = sort(val_abs)
# println.(val_sort[2*n·µ§-n‚Çö.+(-2:4)]);

n_eig_real[i] = count(x-> abs(x)>1e-8, val_real)
n_eig_nonzeros[i] = count(x-> x > 1e-8,val_sort)
min_eig_real[i] = min(val_real[val_real.>1e-8]...)
min_eig_nonzeros[i] = val_sort[2*n·µ§ - n_eig_nonzeros[i] + 1]

end

XLSX.openxlsx("./xlsx/infsup.xlsx", mode = "rw") do xf
    sheet = xf[1]
    for (n,n_eig_r,min_eig_r,n_eig_n,min_eig_n) in zip(indices,n_eig_real,min_eig_real,n_eig_nonzeros,min_eig_nonzeros)
        sheet["A"*string(n)] = n
        sheet["B"*string(n)] = n_eig_r
        sheet["C"*string(n)] = min_eig_r^0.5
        sheet["D"*string(n)] = n_eig_n
        sheet["E"*string(n)] = min_eig_n^0.5
    end
end
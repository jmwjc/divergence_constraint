
using ApproxOperator, LinearAlgebra, XLSX
using ApproxOperator.Elasticity: ‚à´‚à´Œµ·µà·µ¢‚±ºœÉ·µà·µ¢‚±ºdxdy, ‚à´‚à´qpdxdy, ‚à´‚à´p‚àáudxdy, ‚à´v·µ¢g·µ¢ds, ‚à´‚à´v·µ¢b·µ¢dxdy, ‚à´v·µ¢t·µ¢ds, L‚ÇÇ, L‚ÇÇùëù

include("import_patchtest.jl")

ndiv = 16

n = 36

# elements, nodes, nodes_p = import_patchtest_elasticity_penalty("./msh/patchtest_"*string(ndiv)*".msh","./msh/patchtest_c_"*string(n‚Çö)*".msh")
# elements, nodes, nodes_p = import_infsup_linear_mix("./msh/patchtest_"*string(ndiv)*".msh","./msh/patchtest_"*string(n)*".msh",n,n)
elements, nodes, nodes_p = import_infsup_quadratic_mix("./msh/patchtest_tri6_"*string(ndiv)*".msh","./msh/patchtest_"*string(n)*".msh",n,n)

n‚Çë = length(elements["Œ©·µò"])
n·µ§ = length(nodes)
n‚Çö = length(nodes_p)

E = 1.0e0
ŒΩ = 0.3
# ŒΩ = 0.5-1e1

prescribe!(elements["Œ©·µò"],:E=>(x,y,z)->E, index=:ùëî)
prescribe!(elements["Œ©·µò"],:ŒΩ=>(x,y,z)->ŒΩ, index=:ùëî)
prescribe!(elements["Œ©·µñ"],:E=>(x,y,z)->E, index=:ùëî)
prescribe!(elements["Œ©·µñ"],:ŒΩ=>(x,y,z)->ŒΩ, index=:ùëî)
prescribe!(elements["Œ©·µç·µò"],:E=>(x,y,z)->E, index=:ùëî)
prescribe!(elements["Œ©·µç·µò"],:ŒΩ=>(x,y,z)->ŒΩ, index=:ùëî)
prescribe!(elements["Œì‚Å¥·µò"],:Œ±=>(x,y,z)->1e10)
prescribe!(elements["Œì‚Å¥·µò"],:g‚ÇÅ=>(x,y,z)->0.0)
prescribe!(elements["Œì‚Å¥·µò"],:g‚ÇÇ=>(x,y,z)->0.0)
prescribe!(elements["Œì‚Å¥·µò"],:n‚ÇÅ‚ÇÅ=>(x,y,z)->1.0)
prescribe!(elements["Œì‚Å¥·µò"],:n‚ÇÇ‚ÇÇ=>(x,y,z)->1.0)
prescribe!(elements["Œì‚Å¥·µò"],:n‚ÇÅ‚ÇÇ=>(x,y,z)->0.0)

ùëé·µò = ‚à´‚à´Œµ·µà·µ¢‚±ºœÉ·µà·µ¢‚±ºdxdy=>elements["Œ©·µò"]
ùëé·µñ = ‚à´‚à´qpdxdy=>elements["Œ©·µñ"]
ùëè·µñ = ‚à´‚à´p‚àáudxdy=>(elements["Œ©·µñ"],elements["Œ©·µò"])
ùëé·µò·µÖ = ‚à´v·µ¢g·µ¢ds=>elements["Œì‚Å¥·µò"]

k·µò·µò = zeros(2*n·µ§,2*n·µ§)
k·µñ·µñ = zeros(n‚Çö,n‚Çö)
k·µñ·µò = zeros(n‚Çö,2*n·µ§)
f·µñ = zeros(n‚Çö)
f·µò = zeros(2*n·µ§)

ùëé·µò(k·µò·µò)
ùëé·µñ(k·µñ·µñ)
ùëè·µñ(k·µñ·µò)
ùëé·µò·µÖ(k·µò·µò,f·µò)

# d = [-k·µò·µò k·µñ·µò';k·µñ·µò k·µñ·µñ]\[-f·µò;f·µñ]

# ùë¢‚ÇÅ = d[1:2:2*n·µ§]
# ùë¢‚ÇÇ = d[2:2:2*n·µ§]
# ùëù = d[2*n·µ§+1:2*n·µ§+n‚Çö]
# push!(nodes,:d‚ÇÅ=>ùë¢‚ÇÅ)
# push!(nodes,:d‚ÇÇ=>ùë¢‚ÇÇ)
# push!(nodes_p,:p=>ùëù)

# L‚ÇÇu = L‚ÇÇ(elements["Œ©·µç·µò"])
# L‚ÇÇp = L‚ÇÇùëù(elements["Œ©·µç·µñ"])

# println(L‚ÇÇu)
# println(L‚ÇÇp)

val = eigvals(k·µñ·µò'*(k·µñ·µñ\k·µñ·µò),k·µò·µò)
# val = eigvals(k·µñ·µò'*inv(k·µñ·µñ)*k·µñ·µò,k·µò·µò)

# println(2*n·µ§-n‚Çö+1)
# println("Unsorted Eigenvalue")
# println.(val[2*n·µ§-n‚Çö.+(-2:4)]);

val_sign = zeros(2*n·µ§)
for (ii,v) in enumerate(val)
    if v isa Real
        val_sign[ii] = sign(v)
    else
        val_sign[ii] = sign(v.re) < -1e-10 ? -1.0 : 1.0
    end
end
val_real = val_sign .* abs.(val)
val_abs = abs.(val)
# println("Sorted Eigenvalue")
val_sort = sort(val_abs)
# println.(val_sort[2*n·µ§-n‚Çö.+(-2:4)]);

n_eig_positive = count(x-> isa(x,Real) ? x > 1e-10 : x.re > 1e-10,val)
n_eig_nonzeros = count(x-> x > 1e-10,val_sort)
min_eig_positive = isa(val[2*n·µ§ - n_eig_positive + 1],Real) ? val[2*n·µ§ - n_eig_positive + 1] : val[2*n·µ§ - n_eig_positive + 1].re
min_eig_nonzeros = val_sort[2*n·µ§ - n_eig_nonzeros + 1]
min_eig_real = min(val_real[abs.(val_real).>1e-10]...)
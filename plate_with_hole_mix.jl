
using BenchmarkTools
using SparseArrays, Pardiso
using ApproxOperator
using ApproxOperator.Heat: РѕФРѕФqрхбpрхбdxdy, РѕФpрхбnрхбuds, РѕФРѕФРѕЄ­ЮњЉudxdy, РѕФpрхбnрхбgР▒╝ds, РѕФvtd╬Њ, РѕФvgd╬Њ, LРѓѓ, LРѓѓ­ЮњЉ, HРѓЂ

include("import_plate_with_hole.jl")

ps = MKLPardisoSolver()

ndiv = 4
# n = 8
# poly = "tri3"
# elements, nodes, nodes_u = import_linear_mix("./msh/plate_with_hole_"*poly*"_"*string(ndiv)*".msh","./msh/plate_with_hole_"*poly*"_"*string(n)*".msh",n)
nРѓѓ = 5
nРѓЂ = 9
elements, nodes, nodes_u = import_linear_mix("./msh/plate_with_hole_"*poly*"_"*string(ndiv)*".msh","./msh/plate_with_hole_"*poly*"_"*string(nРѓѓ)*"_"*string(nРѓЂ)*".msh",nРѓѓ)
# elements, nodes, nodes_u = import_linear_mix("./msh/plate_with_hole_"*poly*"_"*string(ndiv)*".msh","./msh/plate_with_hole_"*poly*"_"*string(ndiv)*".msh")

nРѓџ = length(nodes)
nрхц = length(nodes_u)

# n = 1
# u(x,y) = (x+y)^n
# РѕѓuРѕѓx(x,y) = n*(x+y)^abs(n-1)
# РѕѓuРѕѓy(x,y) = n*(x+y)^abs(n-1)
# Рѕѓ┬▓uРѕѓx┬▓(x,y)  = n*(n-1)*(x+y)^abs(n-2)
# Рѕѓ┬▓uРѕѓxРѕѓy(x,y) = n*(n-1)*(x+y)^abs(n-2)
# Рѕѓ┬▓uРѕѓy┬▓(x,y)  = n*(n-1)*(x+y)^abs(n-2)
# b(x,y,z) = -Рѕѓ┬▓uРѕѓx┬▓(x,y)-Рѕѓ┬▓uРѕѓy┬▓(x,y)

r(x,y) = (x^2+y^2)^0.5
╬И(x,y) = atan(y/x)
u(x,y) = (r(x,y) + 1/r(x,y))cos(╬И(x,y))
РѕѓuРѕѓx(x,y) = 1 - 1/r(x,y)^2 + 2*1/r(x,y)^2 * sin(╬И(x,y))^2
РѕѓuРѕѓy(x,y) = - 2/r(x,y)^2 * sin(╬И(x,y))*cos(╬И(x,y))

prescribe!(elements["╬ЊрхЇрхў"],:╬▒=>(x,y,z)->1e9)
prescribe!(elements["╬ЊрхЇрхў"],:g=>(x,y,z)->u(x,y))
prescribe!(elements["╬ЊрхЌ"],:t=>(x,y,z,nРѓЂ,nРѓѓ)->РѕѓuРѕѓx(x,y)*nРѓЂ + РѕѓuРѕѓy(x,y)*nРѓѓ)
prescribe!(elements["╬ЕрхЇрхў"],:u=>(x,y,z)->u(x,y))
prescribe!(elements["╬ЕрхЇрхў"],:РѕѓuРѕѓx=>(x,y,z)->РѕѓuРѕѓx(x,y))
prescribe!(elements["╬ЕрхЇрхў"],:РѕѓuРѕѓy=>(x,y,z)->РѕѓuРѕѓy(x,y))
prescribe!(elements["╬ЕрхЇрхў"],:РѕѓuРѕѓz=>(x,y,z)->0.0)
prescribe!(elements["╬ЕрхЇрхќ"],:­ЮЉЮРѓЂ=>(x,y,z)->РѕѓuРѕѓx(x,y))
prescribe!(elements["╬ЕрхЇрхќ"],:­ЮЉЮРѓѓ=>(x,y,z)->РѕѓuРѕѓy(x,y))
prescribe!(elements["╬ЕрхЇрхќ"],:­ЮЉЮРѓЃ=>(x,y,z)->0.0)

­ЮЉј = РѕФРѕФqрхбpрхбdxdy=>elements["╬Ерхќ"]
­ЮЉЈ = [
    РѕФpрхбnрхбuds=>(elements["Рѕѓ╬Ерхќ"],elements["Рѕѓ╬Ерхў"]),
    РѕФРѕФРѕЄ­ЮњЉudxdy=>(elements["╬Ерхќ"],elements["╬Ерхў"]),
]
­ЮЉЈрхЁ = РѕФpрхбnрхбgР▒╝ds=>(elements["╬ЊрхЇрхќ"],elements["╬ЊрхЇрхў"])
­ЮЉЊ = РѕФvtd╬Њ=>elements["╬ЊрхЌ"]

kрхќрхќ = zeros(2*nРѓџ,2*nРѓџ)
fрхќ = zeros(2*nРѓџ)
kрхќрхў = zeros(2*nРѓџ,nрхц)
fрхў = zeros(nрхц)

­ЮЉј(kрхќрхќ)
­ЮЉЈ(kрхќрхў)
­ЮЉЈрхЁ(kрхќрхў,fрхќ)
­ЮЉЊ(fрхў)

k = sparse([kрхќрхќ kрхќрхў;kрхќрхў' zeros(nрхц,nрхц)])
f = [fрхќ;-fрхў]
d = zeros(nрхц+2*nРѓџ)
set_matrixtype!(ps, -2)
k = get_matrix(ps,k,:N)
pardiso(ps,d,k,f)

­ЮЉЮРѓЂ = d[1:2:2*nРѓџ]
­ЮЉЮРѓѓ = d[2:2:2*nРѓџ]
­ЮЉб = d[2*nРѓџ+1:end]
push!(nodes,:pРѓЂ=>­ЮЉЮРѓЂ)
push!(nodes,:pРѓѓ=>­ЮЉЮРѓѓ)
push!(nodes,:pРѓЃ=>zeros(nРѓџ))
push!(nodes_u,:d=>­ЮЉб)

LРѓѓ_­ЮњЉ = LРѓѓ­ЮњЉ(elements["╬ЕрхЇрхќ"])
HРѓЂ_­ЮЉб, LРѓѓ_­ЮЉб = HРѓЂ(elements["╬ЕрхЇрхў"])
println(log10(LРѓѓ_­ЮЉб))
println(log10(HРѓЂ_­ЮЉб))
println(log10(LРѓѓ_­ЮњЉ))
